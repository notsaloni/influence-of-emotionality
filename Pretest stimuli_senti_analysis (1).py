# -*- coding: utf-8 -*-
"""ReMa Final thesis_Senti analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11o2JLtI6NLuXVUlBPglIRx1P3WAdS63h
"""

import pandas as pd
from scipy.stats import ttest_ind
import torch
from google.colab import files

uploaded = files.upload()  # This will prompt you to upload a file

file= "Stimulus_FYP.csv"

df = pd.read_csv(file, sep=";")

print(df.columns.tolist())
#df.head()

from transformers import AutoModelForSequenceClassification
from transformers import TFAutoModelForSequenceClassification
from transformers import AutoTokenizer, AutoConfig
import numpy as np
from scipy.special import softmax

# Preprocess text (username and link placeholders) #code obtained from the authors, did not make much changes here since this is mostly irrelevant and specific to tweets...
def preprocess(text):
    new_text = []
    for t in text.split(" "):
        t = '@user' if t.startswith('@') and len(t) > 1 else t
        t = 'http' if t.startswith('http') else t
        new_text.append(t)
    return " ".join(new_text)
MODEL = f"cardiffnlp/twitter-roberta-base-sentiment-latest"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
config = AutoConfig.from_pretrained(MODEL)

# PT MODEL (IMP)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

model.save_pretrained(MODEL)

#creating a processing function
def process_text(text):
    text = preprocess(text)  # Apply your preprocessing function
    encoded_input = tokenizer(text, return_tensors='pt')
    output = model(**encoded_input)

    scores = output[0][0].detach().numpy()
    scores = softmax(scores)

    # Define the fixed order
    label_order = ["negative", "neutral", "positive"]

    # Map labels to their respective indices
    id2label = {v: k for k, v in config.id2label.items()}

    # Retrieve scores based on the fixed order
    results = [(label, round(float(scores[id2label[label]]), 4)) for label in label_order]

    return results  # Returns a list of (label, score) tuples

# Apply the function to each row in the 'Emotional' column
df["Scores"] = df["headlines"].apply(process_text)

# Extract values into separate columns
df["Negative"] = df["Scores"].apply(lambda x: x[0][1])
df["Neutral"] = df["Scores"].apply(lambda x: x[1][1])
df["Positive"] = df["Scores"].apply(lambda x: x[2][1])

# Drop the original column if not needed
df.drop(columns=["Scores"], inplace=True)

# Display the first few processed rows
df.head()

df.to_csv('Stimuli_new.csv', index=False)
files.download('Stimuli_new.csv') #download the csv, that is then uploaded in R to conduct the pre-test analysis (t-test for negative and neutral scores)